name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop] # Add your actual branch names
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch: # Allows manual triggering

jobs:
  # Job to detect changes in specific directories
  changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      web: ${{ steps.changes.outputs.web }}
      root: ${{ steps.changes.outputs.root }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'package.json'
              - 'package-lock.json'
              - 'yarn.lock'
            web:
              - 'apps/web/**'
              - 'package.json'
              - 'package-lock.json'
              - 'yarn.lock'
            root:
              - 'package.json'
              - 'package-lock.json'
              - 'yarn.lock'
              - '.github/workflows/**'

  # Root dependencies installation and caching
  setup:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

  # API (NestJS) pipeline
  api:
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.root == 'true'
    defaults:
      run:
        working-directory: apps/api
    strategy:
      matrix:
        node-version: [20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci

      - name: Check if format script exists
        id: format-check
        run: |
          if npm run | grep -q "format:check"; then
            echo "format_script_exists=true" >> $GITHUB_OUTPUT
          else
            echo "format_script_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Format check
        if: steps.format-check.outputs.format_script_exists == 'true'
        run: npm run format:check
        continue-on-error: false

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run build

      - name: Run tests with coverage
        run: |
          echo "Running tests with coverage..."
          npm run test -- --coverage --coverageReporters="text-summary" --coverageReporters="lcov"
        env:
          NODE_ENV: test

  # Web (Next.js) pipeline
  web:
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.web == 'true' || needs.changes.outputs.root == 'true'
    defaults:
      run:
        working-directory: apps/web
    strategy:
      matrix:
        node-version: [20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            apps/web/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Check if format script exists
        id: format-check-web
        run: |
          if npm run | grep -q "format:check"; then
            echo "format_script_exists=true" >> $GITHUB_OUTPUT
          else
            echo "format_script_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Format check
        if: steps.format-check-web.outputs.format_script_exists == 'true'
        run: npm run format:check
        continue-on-error: false

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run tests with coverage
        run: |
          echo "Running tests with coverage..."
          npm run test -- --coverage --coverageReporters="text-summary" --coverageReporters="lcov"
        env:
          NODE_ENV: test

  # Security and dependency checks
  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for outdated dependencies
        run: |
          echo "=== Outdated Dependencies ==="
          npm outdated || true
          echo "============================"
        continue-on-error: true

  # Build status summary
  summary:
    runs-on: ubuntu-latest
    needs: [api, web, security]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| API | ${{ needs.api.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Web | ${{ needs.web.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
